* {
    box-sizing: border-box;
}

::selection {
    color: var(--room-color-background);
    background: var(--room-color-text);
}

html {
    --room-color-text: white;
    --room-color-background: #2a2a2a;
    --room-color-label: #aaa;
    --room-color-task: #ff5;
    --room-size-gap: 0.5rem;
    --room-size-border: 0.25rem;
    --room-size-content: 70ch;
    --room-shadow: var(--room-size-border) var(--room-size-border) #00000080;
    height: 100dvh;
    overflow: hidden;
    overflow-wrap: break-word;
    font: medium / 1.5 sans-serif;
    image-rendering: pixelated;
    color: var(--room-color-text);
    background: black;
    /* Disable zooming */
    touch-action: none;
}

body {
    height: 100%;
    margin: unset;
}

.block,
h1,
h2,
h3,
p,
ul,
button,
label,
fieldset {
    display: block;
    padding: var(--room-size-gap);
    margin: unset;
}

.block:empty,
h1:empty,
h2:empty,
h3:empty,
p:empty,
ul:empty,
button:empty,
label:empty,
fieldset:empty {
    display: none;
}

h1,
h2,
h3 {
    border-bottom: var(--room-size-border) solid;
    font-size: unset;
    font-weight: unset;
}

h1,
h2 {
    font-weight: bold;
}

ul {
    padding-left: 1lh;
}

/** Interactive: Interactive element, i.e. a button or input. */

button:not(:first-child),
a.block:not(:first-child),
label:not(:first-child) {
    border-top: var(--room-size-border) solid var(--room-color-text);
}

:is(header, room-window-header) + button:not(:first-child),
:is(header, room-window-header) + a.block:not(:first-child),
:is(header, room-window-header) + label:not(:first-child) {
    border-top: unset;
}

label {
    position: relative;
}

label:is(:focus-within, :hover)::after {
    position: absolute;
    inset: 0;
    border: var(--room-size-border) solid var(--room-color-text);
    content: "";
    pointer-events: none;
}

label:not(:first-child):is(:focus-within, :hover)::after {
    border-top: unset;
}

label:not(:last-child):is(:focus-within, :hover)::after {
    border-bottom: unset;
}

/** Button: Player action button. */

button,
a.block,
label:has(input[type="checkbox"], input[type="radio"]) {
    border: unset;
    font: unset;
    text-align: unset;
    text-decoration: unset;
    color: unset;
    background: unset;
}

button,
a.block,
label:has(input[type="checkbox"], input[type="radio"]),
[tabindex] {
    cursor: pointer;
}

button:is(:focus, :hover),
a.block:is(:focus, :hover),
label:has(input[type="checkbox"], input[type="radio"]):is(:focus-within, :hover),
[tabindex]:is(:focus, :hover) {
    outline: unset;
    color: var(--room-color-background);
    background: var(--room-color-text);
}

button {
    width: 100%;
}

button.inline {
    display: unset;
    width: unset;
    padding: unset;
    text-decoration: underline;
}

button.inline .icon {
    margin-right: var(--room-size-border);
}

input[type="checkbox"],
input[type="radio"] {
    display: unset;
    width: unset;
}

/** Form: Form of labeled inputs. */

form:invalid button:not([type=button]) {
    color: var(--room-color-task);
}

form:invalid button:not([type=button]):is(:focus, :hover) {
    color: var(--room-color-background);
    background: var(--room-color-task);
}

fieldset {
    border: unset;
}

label {
    cursor: text;
}

input,
textarea {
    display: block;
    width: 100%;
    padding: unset;
    border: unset;
    outline: unset;
    margin: unset;
    font: unset;
    color: unset;
    background: unset;
    resize: none;
}

textarea {
    height: 4lh;
}

label small {
    display: block;
    color: var(--room-color-label);
    user-select: none;
    -webkit-user-select: none;
}

small.task {
    display: block;
    color: var(--room-color-task);
}

:is(input, textarea):valid + small.task {
    display: none;
}

/** Header: Header with menu. */

header {
    display: flex;
}

header:not(:last-child) {
    border-bottom: var(--room-size-border) solid;
}

header h2,
header h3 {
    flex: auto;
    border: unset;
}

header button {
    box-sizing: content-box;
    width: unset;
    min-width: 1lh;
    text-align: center;
}

header button:not(:first-child) {
    border: unset;
    border-left: var(--room-size-border) solid var(--room-color-text);
}

small {
    font-size: 0.8125rem;
}

.card {
    /* Specify color for button cards */
    border: var(--room-size-border) solid var(--room-color-text);
}

.blendable {
    position: relative;
}

.blendable::after {
    position: absolute;
    inset: 0;
    content: "";
    background: white;
    opacity: 0;
    transition: opacity linear 0.125s;
}

.blended::after {
    opacity: 1;
}

/**
 * Contextual: Contextual content for an element.
 *
 * Wrapped around a focusable element and its accompanying contextual content. Note that the element
 * cannot be a button, as buttons do not receive focus on click in some browsers, e.g. Safari (see
 * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus).
 */

.contextual {
    position: relative;
}

.contextual > :last-child {
    position: absolute;
    z-index: 1;
    border: var(--room-size-border) solid;
    background: var(--room-color-background);
    box-shadow: var(--room-shadow);
    white-space: nowrap;
}

.contextual:not(:focus-within) > :last-child {
    height: 0;
    border: unset;
    overflow: hidden;
}

.contextual-reversed > :last-child {
    bottom: 100%;
    box-shadow: var(--room-size-border) 0 #00000080;
}

.contextual > ul:last-child {
    padding: unset;
}

.contextual > ul:last-child > li {
    display: block;
    padding: var(--room-size-gap);
}

.icon {
    height: 1rem;
    vertical-align: calc(-1rem / 8);
}

.tile {
    display: block;
    width: 2em;
    height: 2em;
    line-height: 2;
    text-align: center;
}

.placeholder {
    border: var(--room-size-border) solid transparent;
    background:
        linear-gradient(to right, currentcolor 50%, transparent 50%) top left /
            calc(2 * var(--room-size-border)) var(--room-size-border) repeat-x,
        linear-gradient(currentcolor 50%, transparent 50%) top left /
            var(--room-size-border) calc(2 * var(--room-size-border)) repeat-y,
        linear-gradient(to right, transparent 50%, currentcolor 50%) bottom right /
            calc(2 * var(--room-size-border)) var(--room-size-border) repeat-x,
        linear-gradient(transparent 50%, currentcolor 50%) bottom right /
            var(--room-size-border) calc(2 * var(--room-size-border)) repeat-y;
    background-origin: border-box;
}

/** Window: Foreground window. */

.room-window {
    position: absolute;
    inset: var(--room-size-gap) var(--room-size-gap) auto var(--room-size-gap);
    max-width: var(--room-size-content);
    max-height: calc(100% - 2 * var(--room-size-gap));
    margin-inline: auto;
    overflow: hidden auto;
    background: var(--room-color-background);
    box-shadow: var(--room-shadow);
    /* Enable window scrolling */
    touch-action: pan-y;
}

/* Work around Firefox not invalidating nth-child-of selectors (see
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1874042) */
.room-window:not(.room-window-open),
.room-window:not(:nth-last-child(1 of .room-window-open)) {
    display: none;
}

room-window-header button {
    box-sizing: content-box;
    width: unset;
    min-width: 1lh;
    text-align: center;
}

.room-entity {
    --room-entity-x: 0;
    --room-entity-y: 0;
    --room-entity-image: none;
    display: block;
    position: absolute;
    inset: 0 auto auto 0;
    width: 8px;
    height: 8px;
    translate: calc(var(--room-entity-x) - 50%) calc(var(--room-entity-y) - 50%);
    background: var(--room-entity-image);
}
